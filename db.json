{
  "questions": [
    {
      "id": 1,
      "questionText": "What is the main purpose of the 'data' instance in a Vue component?",
      "options": [
        {
          "id": "a",
          "text": "To define variables",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "To define methods for the component",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To define computed properties",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To handle user interactions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "questionText": "What does Vue.js use for building user interfaces?",
      "options": [
        {
          "id": "a",
          "text": "React",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Angular",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Vue CLI",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Virtual DOM",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 3,
      "questionText": "Which directive is used to bind an attribute to an expression in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": ":bind",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "v-model",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-bind",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "v-attr",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "questionText": "How do you define a computed property in Vue",
      "options": [
        {
          "id": "a",
          "text": "As a method inside the 'computed' instance",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "As a method inside the 'methods' instance",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "As a variable inside the 'computed' instance",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "As a variable inside the 'methods' instance",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "questionText": "Which Vue directive is used to conditionally display an element?",
      "options": [
        {
          "id": "a",
          "text": "v-for",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "v-model",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-bind",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "v-show",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 6,
      "questionText": "Which language is Vue written in?",
      "options": [
        {
          "id": "a",
          "text": "C",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "C++",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Python",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "JavaScript",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 7,
      "questionText": "Which Vue directive is used to conditionally render an element?",
      "options": [
        {
          "id": "a",
          "text": "v-model",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "v-bind",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-for",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "v-if",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 8,
      "questionText": "Which Vue directive is used for list rendering?",
      "options": [
        {
          "id": "a",
          "text": "v-for",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "v-show",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-if",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "v-bind",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "questionText": "The v-bind directive is used to attatch an HTML attribute to a data property.",
      "options": [
        {
          "id": "a",
          "text": "Yes",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "No",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Most times",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Sometimes",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "questionText": "Which Vue directive is used to create a two-way binding between a form input and a data property?",
      "options": [
        {
          "id": "a",
          "text": "v-bind",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "v-show",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-model",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "v-for",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "questionText": "We can make a 'watcher' in Vue to monitor a data property and create side effects.",
      "options": [
        {
          "id": "a",
          "text": "There is no such thing as watchers in Vue.",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "No, watchers can only monitor data properties and never create side effects",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Yes, watchers are made to create side effects when a monitored data property reaches a certain point, that is the intention",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 12,
      "questionText": "When a 'watcher' runs, both the old and the new data property values are available as arguments to the watcher method.",
      "options": [
        {
          "id": "a",
          "text": "Only the new data property value is available",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Only the old data property value is available",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Neither the old nor the new data property values are available",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Yes",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 13,
      "questionText": "What is the correct syntax to display the value from the data property ‘message’ inside a <p> tag with text interpolation?",
      "options": [
        {
          "id": "a",
          "text": "<p>// message //</p>",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "<p>## message ##</p>",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "<p>{{ message }}</p>",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "<p>'' message ''</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 14,
      "questionText": "What is the main purpose of the 'mounted' lifecycle hook in a Vue component?",
      "options": [
        {
          "id": "a",
          "text": "To watch data property changes",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To define computed properties",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To define the component's slots before the component is rendered",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To perform side effects after the component has been inserted into the DOM ",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 15,
      "questionText": "Vue uses a file to initialize the root Vue instance and mount it to the DOM, what is the file's name?",
      "options": [
        {
          "id": "a",
          "text": "main.js",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "views.js",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "settings.js",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "config.js",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 16,
      "questionText": "In which lifecycle hook is the DOM accessible and ready for manipulation?",
      "options": [
        {
          "id": "a",
          "text": "created",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "beforeMount",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "mounted",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "beforeCreate",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 17,
      "questionText": "What is the purpose of the provide() method?",
      "options": [
        {
          "id": "a",
          "text": "To make data locally available to a specific parent component",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To keep methods local to a single component",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To make a strict interface of data shared between components",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To make data available to other components",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 18,
      "questionText": "What is the purpose of the inject() method?",
      "options": [
        {
          "id": "a",
          "text": "To create a global function",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To get data in a component that is provided by another component",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "To include 3rd party libraries",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To smoothly integrate the iframe tag in Vue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "questionText": "What is the purpose of the 'errorCaptured' lifecycle hook?",
      "options": [
        {
          "id": "a",
          "text": "To handle errors thrown in component methods",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To handle errors thrown in component watchers",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To handle errors thrown in component lifecycle hooks",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To handle errors thrown in any of the cases mentioned",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 20,
      "questionText": "How can you add a transition effect to an element in Vue?",
      "options": [
        {
          "id": "a",
          "text": "Using the transition() method",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Using the <Transition> wrapper element ",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Transitions are not supported in Vue",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Using the v-transition directive",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 21,
      "questionText": "Which special Vue attribute is recommended to provide when generating elements with v-for?",
      "options": [
        {
          "id": "a",
          "text": "key",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "note",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "elementID",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "number",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 22,
      "questionText": "What command do we need to write to run our Vue project in developer mode?",
      "options": [
        {
          "id": "a",
          "text": "run vue in developer mode",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "npm run vue",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "compile to dev",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "run dev mode",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 23,
      "questionText": "What attribute must be used to make the CSS rules inside the <style> tag of a component local to only that specific component?",
      "options": [
        {
          "id": "a",
          "text": "<style onlyHere>",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "<style local>",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "<style scoped>",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "<style this>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 24,
      "questionText": "How is data passed to a component using props?",
      "options": [
        {
          "id": "a",
          "text": "as a method",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "as a special attribute",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "as a special wrapper tag",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "as text between the components start tag and end tag",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 25,
      "questionText": "In what ways can we pass data from a parent to a child component?",
      "options": [
        {
          "id": "a",
          "text": "Fallthrough Attributes",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "All of the techniques mentioned",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Provide/Inject",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Props",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 26,
      "questionText": "Which of the following is NOT a Vue.js lifecycle hook?",
      "options": [
        {
          "id": "a",
          "text": "beforeCreate",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "beforeMount",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "afterUpdate",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "afterDestroy",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 27,
      "questionText": "What is the Vue.js CLI command to create a new Vue.js project?",
      "options": [
        {
          "id": "a",
          "text": "vue new project-name",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "create-vue-app project-name",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "npm init vue-app project-name",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "vue create project-name",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 28,
      "questionText": "What is Vue Router used for?",
      "options": [
        {
          "id": "a",
          "text": "State management",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Form handling",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Creating routes in Vue.js applications",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "Component communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 29,
      "questionText": "What is the purpose of the Vue.js Vuex library?",
      "options": [
        {
          "id": "a",
          "text": "Handling form validation",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Managing global state in Vue applications",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Styling Vue components",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Routing in Vue applications",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 30,
      "questionText": "What does the 'v-bind' directive do in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "Bind an attribute to an expression",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "Create a computed property",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Conditionally render an element",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Define a method",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 31,
      "questionText": "Which Vue.js feature allows you to reuse a template element in multiple places?",
      "options": [
        {
          "id": "a",
          "text": "Scoped CSS",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Vue Slots",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Vue Components",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Vue Directives",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 32,
      "questionText": "Which Vue.js lifecycle hook is used to fetch data from an API?",
      "options": [
        {
          "id": "a",
          "text": "mounted",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "created",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "beforeMount",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "updated",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 33,
      "questionText": "What is the purpose of the 'v-model' directive in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "Define a computed property",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Bind an attribute to an expression",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Create a two-way binding between a form input and a data property",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "Conditionally render an element",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 34,
      "questionText": "What does the 'v-for' directive do in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "Bind an attribute to an expression",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Create a computed property",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Conditionally render an element",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Render a list of items based on an array",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 35,
      "questionText": "What is the purpose of the 'key' attribute when using 'v-for' in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "It specifies the value to be used in the 'v-model' directive",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "It uniquely identifies each item in the rendered list",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "It defines a computed property",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "It specifies the attribute to bind with 'v-bind'",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 36,
      "questionText": "Which Vue.js feature allows you to define custom logic for handling user events?",
      "options": [
        {
          "id": "a",
          "text": "Vue Directives",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Vue Methods",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Vue Components",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Vue Router",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 37,
      "questionText": "What is the purpose of Vue.js mixins?",
      "options": [
        {
          "id": "a",
          "text": "To create custom directives",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To share reusable logic among Vue components",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "To define computed properties",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To create custom transitions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 38,
      "questionText": "What is the Vue.js directive used to conditionally render an element if a condition is true?",
      "options": [
        {
          "id": "a",
          "text": "v-if",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "v-for",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-else",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "v-show",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 39,
      "questionText": "What does the Vue.js 'computed' property do?",
      "options": [
        {
          "id": "a",
          "text": "It holds reactive data",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "It stores methods for a Vue component",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "It calculates and caches a computed value based on reactive data",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "It renders a list of items",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 40,
      "questionText": "What is the purpose of the 'v-on' directive in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "To conditionally render an element",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To define a computed property",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To bind an event listener to an element",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "To create a two-way binding between a form input and a data property",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 41,
      "questionText": "What is Vue.js used for?",
      "options": [
        {
          "id": "a",
          "text": "Server-side rendering",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Building user interfaces",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "Database management",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Machine learning",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 42,
      "questionText": "What is Vue.js's core library called?",
      "options": [
        {
          "id": "a",
          "text": "Vue.js Core",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "Vue.js Base",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Vue.js Framework",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Vue.js Runtime",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 43,
      "questionText": "Which of the following is a Vue.js router mode?",
      "options": [
        {
          "id": "a",
          "text": "History mode",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "Debug mode",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "Development mode",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "Testing mode",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 44,
      "questionText": "In Vue.js, what is the purpose of the 'v-bind' directive?",
      "options": [
        {
          "id": "a",
          "text": "To bind the value of an input field to a data property",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "To conditionally render an element",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To create a computed property",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To define methods for a component",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 45,
      "questionText": "In Vue.js, which directive is used to render a list of items?",
      "options": [
        {
          "id": "a",
          "text": "v-show",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "v-bind",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "v-for",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "v-model",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 46,
      "questionText": "What is the purpose of the 'beforeDestroy' lifecycle hook in a Vue component?",
      "options": [
        {
          "id": "a",
          "text": "To initialize data properties",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To perform cleanup before the component is destroyed",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "To define computed properties",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To render the component",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 47,
      "questionText": "What is the purpose of Vue.js directives?",
      "options": [
        {
          "id": "a",
          "text": "To define computed properties",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To add custom methods to a Vue component",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To manipulate the DOM and apply reactive behavior to the rendered content",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "To create Vue instances",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 48,
      "questionText": "What is the purpose of the 'v-model' directive in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "To conditionally render an element",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To bind an event listener to an element",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To create a two-way binding between a form input and a data property",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "To define computed properties",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 49,
      "questionText": "Which Vue.js lifecycle hook is called after the component's DOM has been updated?",
      "options": [
        {
          "id": "a",
          "text": "beforeCreate",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "created",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "beforeUpdate",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "updated",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 50,
      "questionText": "What is the purpose of the 'nextTick' method in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "To schedule a callback to be executed after the next DOM update cycle",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "To advance the virtual DOM to the next state",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To force an immediate DOM update",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To trigger a reactivity update",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 51,
      "questionText": "What is the purpose of the 'key' attribute when using 'v-for'?",
      "options": [
        {
          "id": "a",
          "text": "To define a unique identifier for each item in the list",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "To specify the order of items in the list",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To filter items in the list",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To apply custom styling to each item",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 52,
      "questionText": "What does the 'v-once' directive do in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "It binds an element's value to a data property",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "It renders an element and its children only once, and does not re-render them",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "It creates a two-way binding between a form input and a data property",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "It defines a computed property",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 53,
      "questionText": "What is the purpose of the 'v-cloak' directive?",
      "options": [
        {
          "id": "a",
          "text": "To hide an element until it's ready to be displayed",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To prevent an element's content from being compiled",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To keep an element and its children hidden until Vue's compilation is done",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "To conditionally render an element",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 54,
      "questionText": "Which Vue.js lifecycle hook is used to fetch data from an API when a component is created?",
      "options": [
        {
          "id": "a",
          "text": "created",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "beforeCreate",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "mounted",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "updated",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 55,
      "questionText": "What is the purpose of the 'v-pre' directive in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "To pre-render an element's content on the server",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To prevent an element and its children from being compiled",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "To apply custom styling to an element",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To conditionally render an element",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 56,
      "questionText": "What does the 'ref' attribute allow you to do in Vue.js?",
      "options": [
        {
          "id": "a",
          "text": "To reference a DOM element or child component",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "To define a computed property",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To create a two-way binding between a form input and a data property",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To conditionally render an element",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 57,
      "questionText": "What is the purpose of the 'v-slot' directive?",
      "options": [
        {
          "id": "a",
          "text": "To bind an element's value to a data property",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To create custom event listeners",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "To define named slots in a Vue component",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "To conditionally render an element",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 58,
      "questionText": "What is the purpose of the 'v-bind:key' directive when using 'v-for' to render a list of elements?",
      "options": [
        {
          "id": "a",
          "text": "To specify the order of items in the list",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "To bind a unique identifier to each item in the list",
          "isCorrect": true
        },
        {
          "id": "c",
          "text": "To define the list data source",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "To apply custom styling to each item",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 59,
      "questionText": "Which special tag is used to make dynamic components in Vue?",
      "options": [
        {
          "id": "a",
          "text": "<component> ",
          "isCorrect": true
        },
        {
          "id": "b",
          "text": "<Slot> ",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "<KeepAlive>",
          "isCorrect": false
        },
        {
          "id": "d",
          "text": "<DynamicComponent>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 60,
      "questionText": "Which attribute is used with the <component> tag so that we can switch between components?",
      "options": [
        {
          "id": "a",
          "text": "componentName",
          "isCorrect": false
        },
        {
          "id": "b",
          "text": "switch",
          "isCorrect": false
        },
        {
          "id": "c",
          "text": "is",
          "isCorrect": true
        },
        {
          "id": "d",
          "text": "dynamic",
          "isCorrect": false
        }
      ]
    }
  ]
}
